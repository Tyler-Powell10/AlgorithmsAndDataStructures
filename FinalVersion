import java.util.Scanner;
import java.util.Stack;


public class PalindromeApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String input;
        do {
            System.out.print("Enter a phrase: ");
            input = scanner.nextLine();

            // Check if the input contains a digit
            if (input.matches(".*\\d.*")) {
                System.out.println("Input must not contain any numbers. Reinput phrase.");
            }
        } while (input.matches(".*\\d.*"));  // Loop until input contains no digits

        // Use regular expression to replace any non-word characters with an empty string
        String strippedInput = input.replaceAll("\\W", "");

        // Convert all letters to lower case
        strippedInput = strippedInput.toLowerCase();

        System.out.println("New Input: " + strippedInput);

        boolean isPalindromeUsingQueue = isPalindromeQUEUE.checkPalindrome(strippedInput);
        boolean isPalindromeUsingStack = isPalindromeSTACK.checkPalindrome(strippedInput);

        if (isPalindromeUsingQueue) {
            System.out.println("Using a queue, we confirmed the input is a palindrome");
        } else {
            System.out.println("Using a queue, we confirmed the input is not a palindrome");
        }

        if (isPalindromeUsingStack) {
            System.out.println("using a stack, we confirmed the input is a palindrome");
        } else {
            System.out.println("using a stack, we confirmed the input is not a palindrome");
        }

        scanner.close();
    }
}

// i think this is where we actually do the sorting of characters and checking if it is a palendrome 
// we can input each character into the queue
// then push each character to the stack
// we can then pop a character from the stack and get a character from the queue - comparing each individually
// if they are not equal then its not a palendrome
// return true of false
class isPalindromeQUEUE {
  // for queues
  public static boolean checkPalindrome(String str) {
    Queue queue = new Queue(str.length());
    // Add each character of the string to the queue if it is equal to its corresponding character at the end of the string
    for (int i = 0; i < str.length(); i++) {
        if (str.charAt(i) == str.charAt(str.length() - 1 - i)) {
            queue.insert(str.charAt(i));
        }
    }
    // Remove each character from the queue and compare it to the corresponding character in the original string
    for (int i = 0; i < str.length()/2; i++) {
        if (str.charAt(i) != queue.remove()) {
            return false;
        }
    }
    return true;
  }
}

class isPalindromeSTACK {
  public static boolean checkPalindrome(String str) {
      StackX StackX = new StackX(str.length());
      // Add each character of the string to the stack
      for (int i = 0; i < str.length(); i++) {
        StackX.push(str.charAt(i));
      }
      // Pop each character from the stack and compare it to the corresponding character in the original string
      for (int i = 0; i < str.length(); i++) {
          char c1 = str.charAt(i);
          char c2 = StackX.pop();
          if (c1 != c2) {
              return false;
          }
      }
      return true;
  }
}
  
