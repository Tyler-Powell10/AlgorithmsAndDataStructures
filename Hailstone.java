import java.util.ArrayList;

/**
 * @author Frank NKurunziza, Nicholas Phillips, and Tyler Powell
 * 
 * The purpose of this code is to create a Java class called "Hailstone" that takes an integer input "num" and uses recursion to 
 * generate and store in an ArrayList the Hailstone sequence for that number until it reaches the value 1. The Hailstone sequence 
 * is generated by performing a specific set of mathematical operations on the number, which is described in the "recurr" method of the 
 * class. The resulting ArrayList of the Hailstone sequence is stored in the "hailNumber" variable. This code can be used to generate 
 * and store Hailstone sequences for any positive integer input.
 */


public class Hailstone {
    int num;
    ArrayList<Integer> hailNumber=new ArrayList<>();
    // then call a recursive method that creates and stores in the ArrayList the hailstone sequence until the number 1
    public Hailstone(int num,ArrayList<Integer> hail) {
        this.num = num;
        this.hailNumber=hail;
        
        // if less than 1,  set it to one. If greater or equal to one, call the recurr method
        if(num<1){
            num=1;
        }
        else{
            recurr(num);
        }
    }

    public void recurr(int start){
        // if less than 0 or equal to 1, return nothing
        if(start <= 1){
            hailNumber.add(start);
            return;
        }else{
            hailNumber.add(start);
            // if even, divide by 2 and add it to the hailNumber
            if(start%2==0){
                int eNum=start/2;
                recurr(eNum);
            // if odd, multiply by 3 and add 1 to the results
            }else{
                int oNum=(start*3 + 1);
                recurr(oNum);
            }
        }
    }
}
    